[
{
	"uri": "/site/",
	"title": "サイト作成",
	"tags": [],
	"description": "",
	"content": "Chapter 1 サイト作成 Making Site consist of Hugo, GitHub, Netlify\n"
},
{
	"uri": "/java/",
	"title": "Java",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Java "
},
{
	"uri": "/site/markdown/",
	"title": "MarkDownについて",
	"tags": [],
	"description": "",
	"content": " 〇MarkDownとは   概要 MarkDownとはHTMLに変換できる文章の書き方（マークアップ言語）です。 指定されたマークをつけることで（例えば太字にする文字は前後に**をつける、など）\nパーサーがHTMLに変換してくれます(**太字** ⇒\u0026lt;b\u0026gt;太字\u0026lt;/b\u0026gt; )。  　  長所   手軽に文章構造を明示できる 簡単で覚えやすい記述 読み書きに特別なアプリを必要としない それでいて、対応アプリを使えば快適に読み書きできる　引用：日本語Markdownユーザー会 -\u0026gt; Markdownとは\nhttps://www.markdown.jp/what-is-markdown/     　〇MarkDownの表現   文字効果   BOLD\n**BOLD** //**を前後に2つずつつけます   ITALIC\n_ITALIC_ //_を前後につけます   Strike Line\n~~Strike Line~~ //~~を前後に2つずつつけます     　  コード int i = 0; ``` int i = 0; //```を前後に3つずつ付けます　※マークをエスケープする場合は4つずつ ```   　  ブロッククオート  Blockquotes\n \u0026gt;Blockquotes   　  テーブル    header1 header2 header3     a b c    |header1|header2|header3| |:-:|:-:|:-:| //「:--」左寄せ　「--:」右寄せ　「:-:」中央寄せ |a|b|c|   　  Note Noteやその他メッセージボックス(info,tip,warning)はHugoのShortCodeを利用して記述します。\nShortCodeについては、下記サイトを参照：\nhttps://gohugo.io/content-management/shortcodes/\n   Info information\n   Tip tip\n   Warning warning\n   　〇その他参考サイト    メモ書きやドキュメント作成に便利な「Markdown記法」を使ってみよう\nhttps://www.asobou.co.jp/blog/bussiness/markdown\n  Qiita マークダウン記法 一覧表・チートシート\nhttps://qiita.com/kamorits/items/6f342da395ad57468ae3\n   "
},
{
	"uri": "/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Memo Site 調べた内容をまとめる、技術メモサイトです。  　■利用したサービス  GitHub　ソースをオンラインで管理できるサービスです HUGO　記事などのコンテンツを追加するだけでデザインされたサイトをビルドしてくれる、静的サイトジェネレータです netlify　GitHubのリポジトリを監視し、リアルタイムでWebサイトをデプロイしてくれるホスティングサービスです  "
},
{
	"uri": "/java/silver/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "■可変長引数 〇概要\t引数が同じ型であれば、引数を任意の数設定することができる。\t〇形式\t引数の型の後に.を3つつける\tstatic void Method(String... s){}\t※可変長引数を二つ以上含む場合は、可変長引数を最後に記述しないとコンパイルエラーになる。\t（可変長引数の後の引数がどこからなのか判断できないため）\t ■エスケープとダブルクオテーション 〇エスケープ\t\\\u0026quot;\t⇒\t\u0026quot;\t〇ダブルクオテーション \u0026quot;a b\u0026quot;c　⇒　a bc\t ■var 〇決まり\t・varによる型推論はローカル変数の宣言にしか使えない。\t(=フィールドやメソッド引数の型宣言には使用できない）\t ■String 〇valueOf\tStringを生成するメソッド。\tstaticなメソッドのため、インスタンスを生成しないで使用できる。\t（Stringはコンパイラが勝手に判断して）\t例）String s = \u0026quot;aaa\u0026quot;;\ts = String.valueOf(\u0026quot;bbb\u0026quot;);\t〇indexOf\t文字列の中を検索し、そのindexを返すメソッド。\t引数に文字列を指定した場合は、その文字列がはじまるindexを返す。\tない場合は-1を返す。\t例)\tString s = \u0026quot;abcde\u0026quot;;\tint aIndex = s.indexOf(\u0026quot;a\u0026quot;);\t//aIndex: 0\t〇concat\t文字列を結合する。\tString hello = \u0026quot;Hello\u0026quot;;\thello.concat(\u0026quot; Java!\u0026quot;);\t//Hello Java!\t ■StringBuilder 〇概要\t保持している文字列+16文字のバッファを持つ。\t（文字列を渡した場合は、その文字数+16文字のchar配列が生成される）\t〇capacity\t容量を返すメソッド。\tStringBuilder sb = new StringBuilder(\u0026quot;abcde\u0026quot;);\tint cap = sb.capacity();\t//cap: 21\t〇indexof\t指定された部分文字列が最初に出現する位置のインデックスを返す。\tStringBuilder sb = new StringBuilder(\u0026quot;abcde\u0026quot;);\tint index = sb.indexOf(\u0026quot;ab\u0026quot;);\t//index = 0\t ■数値型 〇int⇒short\t大きな範囲の型の変数を小さな範囲の型の変数に代入するときは\t明示的なキャストが必要。\tint a = 10;\tshort b = (short) a;\t明示的にキャストすると、型の範囲を超えていてもコンパイルエラーが生じない。\tただしあふれたが切り捨てられて想定外の結果になるため、注意。\tbyte b = (byte)150;\t//-106\t〇数値型の範囲\tbyte\t：\t-128~127 (8bit)\tshort\t：\t-32768~32,767\t(16bit)\tint\t：\t-2,147,483,648~2,147,483,647\t(32bit)\tlong\t：\t(64bit)\tfloat\t：\t(32bit)\tdouble\t：\t(64bit)\t〇サフィックス\tint型の範囲を超える数値は、後ろにLをつける\tdouble型の後ろはＤ\tfloat型の後ろはFをつける\t〇\u0026amp;と\u0026amp;\u0026amp;、|と||\t\u0026amp;と\u0026amp;\u0026amp;、｜と||の違いは、左オペランドの結果で右オペランドを評価するか、しないか。\t記号を二つつなげたものはショートサーキット演算子ともいわれ、\t左のオペランドで確定する場合は右オペランドを評価しない。\t ■コンスタントプール 〇概要\t文字リテラルはプログラム中に頻繁に表れるため、そのたびにインスタンスを生成すると\t処理の負荷が高くなり、メモリも大量に消費することになる。\tそのため、もし同じ文字列リテラルがプログラム内に再び登場すれば、定数用のメモリ空間にある\t文字列インスタンスへの参照が使いまわしされる。\tこの仕組みをコンスタントプールという。\t例\tString a = \u0026quot;Sample\u0026quot;;\tString b = \u0026quot;Sample\u0026quot;;\tSystem.out.println(a == b);\t//true\t※String a = new String(\u0026quot;Sample\u0026quot;);とすると、\t明示的にインスタンスを生成することになるため\tコンスタントプールは利用されずfalseになる\t〇intern()\tStringクラスのinternメソッドは、コンスタントプールを含むメモリ内の文字列を探して\t再利用するためのメソッド。\t例\tString a = new String(\u0026quot;Sample\u0026quot;);\tString b = new String(\u0026quot;Sample\u0026quot;);\tSystem.out.println(a.intern() == b.intern());\t//true  ■条件、繰り返し文 〇if\tif文の中カッコは省略できる。省略した場合は、条件式の次の一文だけが\t条件に合致したときの処理として実行される。\t〇case文\tcase文の条件式が戻す値には型の制限がある。\tOK:\tint型以下の整数型とそのラッパークラス\t文字と文字列\t列挙型\tNG:\tLong型、boolean型、doubleやfloat型\t〇do while\tdo{処理}while(条件式);\t〇do whileの中カッコ省略\twhile文やdo while文も中カッコを省略できる\tただし、do whileで中カッコを省略する場合は、\t中の処理を1行にしないとコンパイルエラーが発生する。\t〇for文\t複数記述できるのは初期化文と更新文のみ\t条件式は複数書けない\t〇ラベル\t処理を途中で抜けて特定の場所に飛ぶことができる。\t下記コードでのsampleがラベルにあたる。\tsample:\tfor(i = 0; i \u0026lt; 5; i++){\tif(I = 3){\tbreak sample;\t}\t}\t ■繰り返し文 〇配列の宣言\t配列の宣言時、[]は変数の前後どちらでもOK\tint[] a;\t//OK\tint a[];\t//OK\tint []a[];\t//OK\t配列型変数には配列インスタンスへの参照を代入するだけで、\t参照先の配列がいくつの要素を扱えるかは関係ない。\tあくまで配列型は型であり、インスタンスの実装する部分（要素数）を型には記述できない。\tint[3] = new int[3];\t//NG\t宣言時、一次元は省略できないが、二次元をあとから記述することはできる\tint[][] a = new int[3][];\ta[0] = new int[3];\ta[1] = new int[3];\ta[2] = new int[3];\tインスタンスを生成する際、大かっこの後に初期化子{}を記述することも可能。\tただし、大かっこの中に要素数を指定してはいけない。\tint[] array = {2,3};\tint[] array = new int[]{2,3};\t//OK\tint[] array = new int[2]{2,3};\t//コンパイルエラー\t要素数0のインスタンスを生成することも可能\tint [] array = {};\t初期化子｛｝を使う場合は、変数の宣言と同時に行わなければならない。\t ■ガーベージコレクション  Java言語ではJVMのガベージコレクタがメモリ上の使われなくなったインスタンスを探し、\tそのインスタンスを破棄してメモリを解放する。\tガベージコレクションの対象は、どこからも参照されなくなったインスタンス\t ■コンストラクタ 〇初期子\t・コンストラクタもオーバーロードできるが、すべてのコンストラクタで共通に呼び出すメソッドを{}で定義できる\tpublic class Sample(){\tSample(){ System.out.println(\u0026quot;A\u0026quot;);\t}\t{\tSystem.out.println(\u0026quot;B\u0026quot;);\t}\t}\t//mainクラスでインスタンス生成⇒\u0026quot;ＢＡ\u0026quot;が出力される\t初期子はstaticをつけることもできる\tpublic class Sample(){\tstatic int num;\tSample(){ System.out.println(\u0026quot;A\u0026quot;);\t}\tstatic\t{\tnum = 10;\t}\t}\t//mainクラスでSample.num呼び出し⇒　numに10が代入される\t〇デフォルトコンストラクタ\t・コンストラクタを定義しなかった場合、引数なしのデフォルトコンストラクタが自動で定義されるが、\t引数ありのコンストラクタを定義した場合はデフォルトコンストラクタは自動で定義されない。\t〇コンストラクタのオーバーロード\t・オーバーロードした別のコンストラクタを呼び出すときはthisを使用する\t※superは親クラスのコンストラクタを呼び出す\t※オーバーロードされた別のコンストラクタを呼び出すthisを使う場合は、最初に書かないといけない\t〇インターフェースへの実装の記述\t基本的にインターフェースに実装を書くことはできないが、\t共通的に実行される処理について、\tdefaultをつけてインターフェース中に記述することができる。\t※ただしObjectクラスのメソッドをオーバーライドするとコンパイルエラーとなる。\t "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]